@use "sass:math";
@use "sass:map";

@mixin box-shadow($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `shadow`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

$default: #1b1f3b;
$input: ("small": 0.3rem, "medium": 1.1rem, "large": 1.5rem);
$padding-x-bottom: 1rem .3rem;
$label-padding-top: ("small": 0, "medium": .2rem, "large": .4rem);
$radius: ("small": 0.5rem, "medium": 0.625rem, "large": 0.625rem);

@mixin size($size) {
  $padding-y: map.get($input, $size);

  .tf-input {
    padding: $padding-y $padding-x-bottom;
    border-radius: map.get($radius, $size);
  }

  .tf-label {
    padding: math.div($padding-y, 2) $padding-x-bottom;
  }
}

@mixin label-float($size) {
  &.--filled .tf-label,
  &.--focused .tf-label {
    font-size: small;
    color: $default;
    padding-top: map.get($label-padding-top, $size);
  }

  @if $size == small {
    .tf-label {
      display: none;
    }
    .tf-input::placeholder {
      visibility: visible;
    }
  }
}

@mixin inherit {
  width: inherit;
  height: inherit;
  box-sizing: border-box;
}