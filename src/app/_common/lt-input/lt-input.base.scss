@mixin size($element) {
  $pt: 1.5rem;
  $pxb: 1rem .3rem;
  $padding-l: $pt $pxb;
  $padding-m: calc(#{$pt} - .40rem) $pxb;
  $padding-s: calc(#{$pt} - 1.3rem) $pxb;
  $radius-s: 0.5rem;
  $radius-m: 0.625rem;
  $radius-l: 0.625rem;

  &[data-size="small"]#{$element} {
    @if $element == input {
      padding: $padding-s;
      border-radius: $radius-s;
    } @else {
      padding: 0 1rem .2rem;
    }
  }

  &[data-size="medium"]#{$element} {
    @if $element == input {
      padding: $padding-m;
      border-radius: $radius-m;
    } @else {
      padding: calc(#{$pt / 2.5}) $pxb;
    }
  }

  &[data-size="large"]#{$element} {
    @if $element == input {
      padding: $padding-l;
      border-radius: $radius-l;
    } @else {
      padding: calc(#{$pt} - .65rem) $pxb;
    }
  }

  // display placeholder for small size
  &[data-size="small"] input::placeholder {
    visibility: visible;
  }
  // hide label for small size
  &[data-size="small"] .lt-input-label-wrapper {
    display: none;
  }

  &[data-size="medium"] .lt-input-wrapper:focus-within .lt-input-label {
    padding-top: .2rem;
  }
  &[data-size="large"] .lt-input-wrapper:focus-within .lt-input-label {
    padding-top: .5rem;
  }

}

@mixin box-shadow($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `shadow`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}