@use "sass:map";

$primary: #526ed3;
$accent: #3aa981;
$warn: #dd4c1e;
$warn-secondary: #e38163;
$error: #B33F40;
$inactive: #1B1F3B66;
$default: #1b1f3b;
$bgc: #fff;

$duration: 300ms;
$transition: $duration ease-in-out;
$input-size: ("small": .2rem 1rem .3rem, "medium": 1.1rem 1rem .3rem, "large": 1.5rem 1rem .3rem);
$label-size: ("small": 0 1rem .2rem, "medium": .6rem 1rem .3rem, "large": .85rem 1rem .3rem);
$label-padding-top: ("small": 0, "medium": .2rem, "large": .4rem);
$radius: ("small": 0.5rem, "medium": 0.625rem, "large": 0.625rem);

@mixin box-shadow($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `shadow`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

@mixin size($size) {
  .lt-input {
    padding: map.get($input-size, $size);
    border-radius: map.get($radius, $size);
  }

  .lt-input-label {
    padding: map.get($label-size, $size);
  }

  .lt-input--filled .lt-input-label,
  .lt-input-wrapper:focus-within .lt-input-label {
    font-size: small;
    color: $default;
    padding-top: map.get($label-padding-top, $size);
  }

  @if $size == "small" {
    .lt-input::placeholder {
      visibility: visible;
    }
    .lt-input-label {
      display: none;
    }
  }
}

:host {
  display: flex;
  -webkit-font-smoothing: antialiased;

  &[lt-input-size="small"] {
    @include size(small);
  }
  &[lt-input-size="medium"] {
    @include size(medium);
  }
  &[lt-input-size="large"] {
    @include size(large);
  }
}

.lt-input-wrapper {
  display: flex;
  width: 100%;
  position: relative;

  // INVALID
  &.lt-input--invalid {
    .lt-input {
      outline-width: 2px;
      outline-color: $warn;

      &:focus-within {
        outline-color: $warn-secondary;
      }

      @include box-shadow(0);
    }

    .lt-input-label {
      color: $warn !important;
    }

  }
}

.lt-input {
  @include box-shadow(1);

  width: 100%;
  background-color: $bgc;
  border: none;

  // ANIMATE OUTLINE ON FOCUS
  transition: $transition;
  outline: 0 solid $primary;
  &:focus-within {
    @include box-shadow(0);
    outline-width: 2px;
  }

  // PLACEHOLDER
  &::placeholder { visibility: hidden; }
  &:focus-within::placeholder {
    visibility: initial;
    color: $inactive;
  }

}

// LABEL
.lt-input-label-wrapper {
  box-sizing: border-box;

  pointer-events: none;

  position: absolute;
  left: 0;
  width: 100%;
  height: 100%;
}

.lt-input-label {
  box-sizing: border-box;
  width: 100%;
  position: absolute;
  height: auto;

  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  font-size: inherit;

  transition: $transition;
}
